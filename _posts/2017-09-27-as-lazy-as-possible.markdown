## 前端开发怎么样才能做到更懒?
---
![](/assets/article/2017-09-27_01.png)
在如今,我们编写这三部曲的时候已经不再"裸写"了,这意味着我们在开发阶段编写的代码与实际在浏览器环境中运行的代码已经不一样了,详细来说:
![](/assets/article/2017-09-27_02.png)

- 通过模版语言来生成```HTML```.
- 通过CSS预处理器来生成```CSS```代码.
- 通过```ES6+```的语法和特性来编写```JS```代码.

代码书协方式的演进如下:

![](/assets/article/2017-09-27_03.png)
如上图代码所示,仅仅使用了模版语言最基本的标记语法，还没有插入使用模板语言的任何逻辑能力。仅此一步，就可以看出模板语言带来的好处。

原先我们在写 ```HTML``` 代码时，会花费大量的精力在 ```<```、```/```、```>``` 这样的语法噪音上；同时，识别标签的嵌套关系也很费眼。幸运的是，```Jade``` 和 ```Jedi``` 这样的现代模板语言把前端工程师解放了出来。它们通过缩进来表达嵌套关系，层级关系一目了然；语法更精练，表现力更强。


![](/assets/article/2017-09-27_04.png)

在 ```CSS``` 方面，预处理器一方面通过更简洁的语法减轻开发者的书写负担，另一方面通过内置的逻辑能力增强了代码的表现力。举个例子，在使用原生 ```CSS``` 来写代码时，不同元素采用的相同颜色只能分散在代码各处；而采用了 ```CSS``` 预处理器之后，我们可以把相同意义的颜色通过变量的形式抽象出来，然后在代码各处调用即可。这样不仅便于后期维护，在平时读代码时也更容易理解代码意图。
![](/assets/article/2017-09-27_05.png)
在 ```JS``` 方面，我们开始享受 ```ES6+``` 带来的新特征福利。```ES（ECMAScript）```是定义 ```JS``` 这门语言的标准规范，从第六版开始，ES 以每年一版的节奏持续快速地扩展着 ```JS``` 语言的能力。

在以往，如果我们要实现 “在数组中找出符合特定条件的成员” 的需求，往往需要借助 ```Underscore``` 这样的工具库，调用它的 ```_.find()``` 方法。而在 ```ES6``` 中，语言本身就扩展了数组的能力，我们只需要直接调用 ```Array#find()``` 接口即可。另外，像箭头函数这样的新语法也可以令代码进一步简化。

![](/assets/article/2017-09-27_06.png)

在 ```HTML```、```CSS```、```JS``` 这三大块，我们放弃 “裸写”，采用 “更高级” 语言的目的在于：
- 利用高级语言提供的 “逻辑能力” 来增强代码的表现力。
- 利用高级语言的 “语法糖” 和 “新特性” 来提升开发效率和舒适度。

![](/assets/article/2017-09-27_07.png)

当然，采用这些更高级的语言也不是完全没有成本的。我们在开发阶段所用的语言已经不是纯粹的 ```HTML```、```CSS```、```JS``` 了，浏览器无法直接识别和运行。因此，当我们放弃 “裸写”，也就意味着：
- 在部署流程中需要设立构建环节，把源码编译到浏览器环境可以运行的目标代码。
- 在开发阶段，需要有工具来实时监视并编译有变动的源码，以确保页面上呈现的是我们修改过的最新效果。

![](/assets/article/2017-09-27_08.png)


在企业级的前端开发中,我们需要熟练一下内容:
- **模块化**:　模块化是最常见的编程实践之一，令我们的代码组织更加清晰、易维护。```ES6``` 为 ```JS``` 增加了完善的模块化方案，我们的日常开发也已经迁移到了 ```ES6``` 模块规范之下。
- **包管理**:　如何将开源社区中的优秀组件为我所用？这就不能不提 “```npm```” 这个最主流的 ```JS``` 包管理器。前端界优秀的开源项目几乎都发布到了 ```npm``` 的包仓库，我们日常开发中用到的第三方库也都是由 ```npm``` 来管理的。

    打包工具可以把我们写的模块化的源码和第三方包整合到一起，形成页面所需的完整 ```JS``` 资源。“包管理器”、“模块化”、“打包工具” 的相互结合，基本上就是日常的 ```JS``` 代码组织方式。
- **组件化**:　在传统的前端开发中，```HTML```、```CSS```、```JS``` 这三块的代码有各自独立的文件，这些文件往往也分散在不同的目录结构中。

如果页面功能区块的划分足够清晰，开发者就可以用 “组件” 的概念来把页面拆分，整个页面会被视为多个组件的嵌套和组合；同时，开发者也倾向于把每个组件相关的 ```HTML```、```CSS```、```JS``` 代码整合到同一个目录（或同一个文件）中，便于管理和维护。

这就是 “组件化” 的开发模式。要实现这样的开发模式，通常需要前端框架和构建工具的配合。
- **单页应用**:　```HTML5``` 的 ```History API``` 为前端提供了控制浏览器导航行为的能力，配合 ```Ajax``` 无刷新更新页面内容的特性，我们可以在一个页面内实现应用的多视图切换，避免页面的频繁跳转，提供类似桌面应用的体验。比如 ```Gmail``` 等产品就是典型的单页应用模式，百姓网的大多数后台系统也都是单页应用。
- 当然这不是全部,这需要在学习和工作中自己根据需求去了解.

> 